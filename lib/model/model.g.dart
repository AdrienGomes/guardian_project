// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: prefer_const_declarations, no_leading_underscores_for_local_identifiers

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:HotWord.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// HotWord TABLE
class TableHotWord extends SqfEntityTableBase {
  TableHotWord() {
    // declare properties of EntityTable
    tableName = 'hotWord';
    primaryKeyName = 'techId_';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isPrimaryKeyField: true),
      SqfEntityFieldBase('value', DbType.text),
      SqfEntityFieldBase('listeningSessionName', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableHotWord();
  }
}

// ListeningSession TABLE
class TableListeningSession extends SqfEntityTableBase {
  TableListeningSession() {
    // declare properties of EntityTable
    tableName = 'listeningSession';
    primaryKeyName = 'techId_';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isPrimaryKeyField: true),
      SqfEntityFieldBase('label', DbType.text),
      SqfEntityFieldBase('duration', DbType.numeric),
      SqfEntityFieldBase('isActive', DbType.bool),
      SqfEntityFieldBase('rownum', DbType.integer, isIndex: true),
      SqfEntityFieldBase('hotWordName', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableListeningSession();
  }
}

// ListeningSessionHotWord TABLE
class TableListeningSessionHotWord extends SqfEntityTableBase {
  TableListeningSessionHotWord() {
    // declare properties of EntityTable
    tableName = 'listeningSessionHotWord';
    relationType = RelationType.MANY_TO_MANY;
    primaryKeyName = '';
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableListeningSession.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'listeningSessionTechId_', isPrimaryKeyField: true),
      SqfEntityFieldRelationshipBase(TableHotWord.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'hotWordTechId_', isPrimaryKeyField: true),
      SqfEntityFieldBase('listeningSessionName', DbType.text),
      SqfEntityFieldBase('hotWordName', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableListeningSessionHotWord();
  }
}
// END TABLES

// BEGIN SEQUENCES
// rowNumber SEQUENCE
class SequenceRownumberSequence extends SqfEntitySequenceBase {
  SequenceRownumberSequence() {
    sequenceName = 'rowNumber';
    maxValue = 10000; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceRownumberSequence? _instance;
  static SequenceRownumberSequence get getInstance {
    return _instance = _instance ?? SequenceRownumberSequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class DbModel extends SqfEntityModelProvider {
  DbModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    preSaveAction = dbModel.preSaveAction;
    logFunction = dbModel.logFunction;
    databaseTables = [
      TableHotWord.getInstance,
      TableListeningSession.getInstance,
      TableListeningSessionHotWord.getInstance,
    ];

    sequences = [
      SequenceRownumberSequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = dbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region HotWord
class HotWord extends TableBase {
  HotWord({this.techId_, this.name, this.value, this.listeningSessionName}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  HotWord.withFields(this.techId_, this.name, this.value, this.listeningSessionName) {
    _setDefaultValues();
  }
  HotWord.withId(this.techId_, this.name, this.value, this.listeningSessionName) {
    _setDefaultValues();
  }
  // fromMap v2.0
  HotWord.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    techId_ = int.tryParse(o['techId_'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['value'] != null) {
      value = o['value'].toString();
    }
    if (o['listeningSessionName'] != null) {
      listeningSessionName = o['listeningSessionName'].toString();
    }

    isSaved = true;
  }
  // FIELDS (HotWord)
  int? techId_;
  String? name;
  String? value;
  String? listeningSessionName;
  bool? isSaved;
  // end FIELDS (HotWord)

// COLLECTIONS & VIRTUALS (HotWord)
  ///(RelationType.MANY_TO_MANY) (listeningSessionHotWord) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plListeningSessions', 'plField2'..]) or so on..
  List<ListeningSession>? plListeningSessions;

  /// get ListeningSession(s) filtered by listeningSessionTechId_ IN listeningSessionHotWord
  ListeningSessionFilterBuilder? getListeningSessions({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ListeningSession()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where('techId_ IN (SELECT listeningSessionTechId_ FROM listeningSessionHotWord WHERE hotWordTechId_=?)',
            parameterValue: techId_)
        .and;
  }

// END COLLECTIONS & VIRTUALS (HotWord)

  static const bool _softDeleteActivated = false;
  HotWordManager? __mnHotWord;

  HotWordManager get _mnHotWord {
    return __mnHotWord = __mnHotWord ?? HotWordManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['techId_'] = techId_;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (listeningSessionName != null || !forView) {
      map['listeningSessionName'] = listeningSessionName;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false, bool forJson = false, bool forView = false]) async {
    final map = <String, dynamic>{};
    map['techId_'] = techId_;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (listeningSessionName != null || !forView) {
      map['listeningSessionName'] = listeningSessionName;
    }

// COLLECTIONS (HotWord)
    if (!forQuery) {
      map['ListeningSessions'] = await getListeningSessions()!.toMapList();
    }
// END COLLECTIONS (HotWord)

    return map;
  }

  /// This method returns Json String [HotWord]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [HotWord]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [techId_, name, value, listeningSessionName];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [techId_, name, value, listeningSessionName];
  }

  static Future<List<HotWord>?> fromWebUrl(Uri uri, {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint('SQFENTITY ERROR HotWord.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<HotWord>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <HotWord>[];
    try {
      objList = list.map((hotword) => HotWord.fromMap(hotword as Map<String, dynamic>)).toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR HotWord.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<HotWord>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<HotWord> objList = <HotWord>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = HotWord.fromMap(map as Map<String, dynamic>, setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('hotWord.plListeningSessions') && */ (preloadFields == null ||
            preloadFields.contains('plListeningSessions'))) {
          /*_loadedfields!.add('hotWord.plListeningSessions'); */ obj.plListeningSessions = obj.plListeningSessions ??
              await obj.getListeningSessions()!.toList(
                  preload: preload, preloadFields: preloadFields, loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns HotWord by ID if exist, otherwise returns null
  /// Primary Keys: int? techId_, String? name
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [HotWord] if exist, otherwise returns null
  Future<HotWord?> getById(int? techId_, String? name,
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    if (techId_ == null) {
      return null;
    }
    HotWord? obj;
    final data = await _mnHotWord.getById([techId_, name]);
    if (data.length != 0) {
      obj = HotWord.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('hotWord.plListeningSessions') && */ (preloadFields == null ||
            preloadFields.contains('plListeningSessions'))) {
          /*_loadedfields!.add('hotWord.plListeningSessions'); */ obj.plListeningSessions = obj.plListeningSessions ??
              await obj.getListeningSessions()!.toList(
                  preload: preload, preloadFields: preloadFields, loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (HotWord) object. If the Primary Key (techId_) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same techId_
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnHotWord.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO hotWord (techId_, name, value, listeningSessionName)  VALUES (?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<HotWord> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<HotWord> hotwords,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DbModel().batchStart();
    for (final obj in hotwords) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await DbModel().batchCommit(exclusive: exclusive, noResult: noResult, continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns techId_
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnHotWord.rawInsert(
          'INSERT OR REPLACE INTO hotWord (techId_, name, value, listeningSessionName)  VALUES (?,?,?,?)',
          [techId_, name, value, listeningSessionName],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(success: true, successMessage: 'HotWord techId_=$techId_ updated successfully');
      } else {
        saveResult = BoolResult(success: false, errorMessage: 'HotWord techId_=$techId_ did not update');
      }
      return techId_;
    } catch (e) {
      saveResult = BoolResult(success: false, errorMessage: 'HotWord Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<HotWord>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<HotWord> hotwords,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnHotWord.rawInsertAll(
        'INSERT OR REPLACE INTO hotWord (techId_, name, value, listeningSessionName)  VALUES (?,?,?,?)', hotwords,
        exclusive: exclusive, noResult: noResult, continueOnError: continueOnError);
    return results;
  }

  /// Deletes HotWord

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete HotWord invoked (techId_=$techId_)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnHotWord.delete(QueryParams(whereString: 'techId_=? AND name=?', whereArguments: [techId_, name]));
    } else {
      return _mnHotWord.updateBatch(
          QueryParams(whereString: 'techId_=? AND name=?', whereArguments: [techId_, name]), {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg = 'set useSoftDeleting:true in the table definition of [HotWord] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  HotWordFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return HotWordFilterBuilder(this, getIsDeleted)..qparams.selectColumns = columnsToSelect;
  }

  @override
  HotWordFilterBuilder distinct({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return HotWordFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      techId_ = null;
      name = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion hotword

// region HotWordField
class HotWordField extends FilterBase {
  HotWordField(HotWordFilterBuilder hotwordFB) : super(hotwordFB);

  @override
  HotWordFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder isNull() {
    return super.isNull() as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as HotWordFilterBuilder;
  }

  @override
  HotWordField get not {
    return super.not as HotWordField;
  }
}
// endregion HotWordField

// region HotWordFilterBuilder
class HotWordFilterBuilder extends ConjunctionBase {
  HotWordFilterBuilder(HotWord obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnHotWord = obj._mnHotWord;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  HotWordManager? _mnHotWord;

  /// put the sql keyword 'AND'
  @override
  HotWordFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  HotWordFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  HotWordFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  HotWordFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  HotWordFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  HotWordFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  HotWordFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  HotWordFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  HotWordFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  HotWordFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  HotWordFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  HotWordField _setField(HotWordField? field, String colName, DbType dbtype) {
    return HotWordField(this)..param = DbParameter(dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  HotWordField? _techId_;
  HotWordField get techId_ {
    return _techId_ = _setField(_techId_, 'techId_', DbType.integer);
  }

  HotWordField? _name;
  HotWordField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  HotWordField? _value;
  HotWordField get value {
    return _value = _setField(_value, 'value', DbType.text);
  }

  HotWordField? _listeningSessionName;
  HotWordField get listeningSessionName {
    return _listeningSessionName = _setField(_listeningSessionName, 'listeningSessionName', DbType.text);
  }

  /// Deletes List<HotWord> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnHotWord!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnHotWord!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'techId_ IN (SELECT techId_ from hotWord ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnHotWord!.updateBatch(qparams, values);
  }

  /// This method always returns [HotWord] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> HotWord?
  @override
  Future<HotWord?> toSingle(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnHotWord!.toList(qparams);
    final data = await objFuture;
    HotWord? obj;
    if (data.isNotEmpty) {
      obj = HotWord.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('hotWord.plListeningSessions') && */ (preloadFields == null ||
            preloadFields.contains('plListeningSessions'))) {
          /*_loadedfields!.add('hotWord.plListeningSessions'); */ obj.plListeningSessions = obj.plListeningSessions ??
              await obj.getListeningSessions()!.toList(
                  preload: preload, preloadFields: preloadFields, loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [HotWord]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> HotWord?
  @override
  Future<HotWord> toSingleOrDefault(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload, preloadFields: preloadFields, loadParents: loadParents, loadedFields: loadedFields) ??
        HotWord();
  }

  /// This method returns int. [HotWord]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? hotwordCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final hotwordsFuture = await _mnHotWord!.toList(qparams);
    final int count = hotwordsFuture[0]['CNT'] as int;
    if (hotwordCount != null) {
      hotwordCount(count);
    }
    return count;
  }

  /// This method returns List<HotWord> [HotWord]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<HotWord>
  @override
  Future<List<HotWord>> toList(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<HotWord> hotwordsData = await HotWord.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return hotwordsData;
  }

  /// This method returns Json String [HotWord]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [HotWord]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [HotWord]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnHotWord!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [HotWord]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `techId_`name` FROM hotWord WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<techId_,name> [HotWord]
  /// <returns>List<techId_,name>
  @override
  Future<List<HotWord>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    qparams.selectColumns = ['techId_', 'name'];
    final hotwordFuture = await _mnHotWord!.toList(qparams);
    return await HotWord.fromMapList(hotwordFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [HotWord]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnHotWord!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await HotWord.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString([VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnHotWord!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion HotWordFilterBuilder

// region HotWordFields
class HotWordFields {
  static TableField? _fTechId_;
  static TableField get techId_ {
    return _fTechId_ = _fTechId_ ?? SqlSyntax.setField(_fTechId_, 'techid_', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fValue;
  static TableField get value {
    return _fValue = _fValue ?? SqlSyntax.setField(_fValue, 'value', DbType.text);
  }

  static TableField? _fListeningSessionName;
  static TableField get listeningSessionName {
    return _fListeningSessionName =
        _fListeningSessionName ?? SqlSyntax.setField(_fListeningSessionName, 'listeningSessionName', DbType.text);
  }
}
// endregion HotWordFields

//region HotWordManager
class HotWordManager extends SqfEntityProvider {
  HotWordManager() : super(DbModel(), tableName: _tableName, primaryKeyList: _primaryKeyList, whereStr: _whereStr);
  static const String _tableName = 'hotWord';
  static const List<String> _primaryKeyList = ['techId_', 'name'];
  static const String _whereStr = 'techId_=? AND name=?';
}

//endregion HotWordManager
// region ListeningSession
class ListeningSession extends TableBase {
  ListeningSession({this.techId_, this.name, this.label, this.duration, this.isActive, this.rownum, this.hotWordName}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  ListeningSession.withFields(
      this.techId_, this.name, this.label, this.duration, this.isActive, this.rownum, this.hotWordName) {
    _setDefaultValues();
  }
  ListeningSession.withId(
      this.techId_, this.name, this.label, this.duration, this.isActive, this.rownum, this.hotWordName) {
    _setDefaultValues();
  }
  // fromMap v2.0
  ListeningSession.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    techId_ = int.tryParse(o['techId_'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['label'] != null) {
      label = o['label'].toString();
    }
    if (o['duration'] != null) {
      duration = int.tryParse(o['duration'].toString());
    }
    if (o['isActive'] != null) {
      isActive = o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['rownum'] != null) {
      rownum = int.tryParse(o['rownum'].toString());
    }
    if (o['hotWordName'] != null) {
      hotWordName = o['hotWordName'].toString();
    }

    isSaved = true;
  }
  // FIELDS (ListeningSession)
  int? techId_;
  String? name;
  String? label;
  int? duration;
  bool? isActive;
  int? rownum;
  String? hotWordName;
  bool? isSaved;
  // end FIELDS (ListeningSession)

// COLLECTIONS & VIRTUALS (ListeningSession)
  ///(RelationType.MANY_TO_MANY) (listeningSessionHotWord) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plHotWords', 'plField2'..]) or so on..
  List<HotWord>? plHotWords;

  /// get HotWord(s) filtered by hotWordTechId_ IN listeningSessionHotWord
  HotWordFilterBuilder? getHotWords({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return HotWord()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where('techId_ IN (SELECT hotWordTechId_ FROM listeningSessionHotWord WHERE listeningSessionTechId_=?)',
            parameterValue: techId_)
        .and;
  }

// END COLLECTIONS & VIRTUALS (ListeningSession)

  static const bool _softDeleteActivated = false;
  ListeningSessionManager? __mnListeningSession;

  ListeningSessionManager get _mnListeningSession {
    return __mnListeningSession = __mnListeningSession ?? ListeningSessionManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['techId_'] = techId_;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (duration != null || !forView) {
      map['duration'] = duration;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (rownum != null || !forView) {
      map['rownum'] = rownum;
    }
    if (hotWordName != null || !forView) {
      map['hotWordName'] = hotWordName;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false, bool forJson = false, bool forView = false]) async {
    final map = <String, dynamic>{};
    map['techId_'] = techId_;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (duration != null || !forView) {
      map['duration'] = duration;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (rownum != null || !forView) {
      map['rownum'] = rownum;
    }
    if (hotWordName != null || !forView) {
      map['hotWordName'] = hotWordName;
    }

// COLLECTIONS (ListeningSession)
    if (!forQuery) {
      map['HotWords'] = await getHotWords()!.toMapList();
    }
// END COLLECTIONS (ListeningSession)

    return map;
  }

  /// This method returns Json String [ListeningSession]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ListeningSession]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [techId_, name, label, duration, isActive, rownum, hotWordName];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [techId_, name, label, duration, isActive, rownum, hotWordName];
  }

  static Future<List<ListeningSession>?> fromWebUrl(Uri uri, {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint('SQFENTITY ERROR ListeningSession.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<ListeningSession>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ListeningSession>[];
    try {
      objList =
          list.map((listeningsession) => ListeningSession.fromMap(listeningsession as Map<String, dynamic>)).toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR ListeningSession.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ListeningSession>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<ListeningSession> objList = <ListeningSession>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ListeningSession.fromMap(map as Map<String, dynamic>, setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('listeningSession.plHotWords') && */ (preloadFields == null ||
            preloadFields.contains('plHotWords'))) {
          /*_loadedfields!.add('listeningSession.plHotWords'); */ obj.plHotWords = obj.plHotWords ??
              await obj.getHotWords()!.toList(
                  preload: preload, preloadFields: preloadFields, loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ListeningSession by ID if exist, otherwise returns null
  /// Primary Keys: int? techId_, String? name
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [ListeningSession] if exist, otherwise returns null
  Future<ListeningSession?> getById(int? techId_, String? name,
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    if (techId_ == null) {
      return null;
    }
    ListeningSession? obj;
    final data = await _mnListeningSession.getById([techId_, name]);
    if (data.length != 0) {
      obj = ListeningSession.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('listeningSession.plHotWords') && */ (preloadFields == null ||
            preloadFields.contains('plHotWords'))) {
          /*_loadedfields!.add('listeningSession.plHotWords'); */ obj.plHotWords = obj.plHotWords ??
              await obj.getHotWords()!.toList(
                  preload: preload, preloadFields: preloadFields, loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ListeningSession) object. If the Primary Key (techId_) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same techId_
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnListeningSession.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO listeningSession (techId_, name, label, duration, isActive, rownum, hotWordName)  VALUES (?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<ListeningSession> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ListeningSession> listeningsessions,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DbModel().batchStart();
    for (final obj in listeningsessions) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await DbModel().batchCommit(exclusive: exclusive, noResult: noResult, continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns techId_
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnListeningSession.rawInsert(
          'INSERT OR REPLACE INTO listeningSession (techId_, name, label, duration, isActive, rownum, hotWordName)  VALUES (?,?,?,?,?,?,?)',
          [techId_, name, label, duration, isActive, rownum, hotWordName],
          ignoreBatch);
      if (result! > 0) {
        saveResult =
            BoolResult(success: true, successMessage: 'ListeningSession techId_=$techId_ updated successfully');
      } else {
        saveResult = BoolResult(success: false, errorMessage: 'ListeningSession techId_=$techId_ did not update');
      }
      return techId_;
    } catch (e) {
      saveResult = BoolResult(success: false, errorMessage: 'ListeningSession Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<ListeningSession>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<ListeningSession> listeningsessions,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnListeningSession.rawInsertAll(
        'INSERT OR REPLACE INTO listeningSession (techId_, name, label, duration, isActive, rownum, hotWordName)  VALUES (?,?,?,?,?,?,?)',
        listeningsessions,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes ListeningSession

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete ListeningSession invoked (techId_=$techId_)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnListeningSession
          .delete(QueryParams(whereString: 'techId_=? AND name=?', whereArguments: [techId_, name]));
    } else {
      return _mnListeningSession.updateBatch(
          QueryParams(whereString: 'techId_=? AND name=?', whereArguments: [techId_, name]), {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg = 'set useSoftDeleting:true in the table definition of [ListeningSession] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ListeningSessionFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ListeningSessionFilterBuilder(this, getIsDeleted)..qparams.selectColumns = columnsToSelect;
  }

  @override
  ListeningSessionFilterBuilder distinct({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ListeningSessionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      techId_ = null;
      name = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion listeningsession

// region ListeningSessionField
class ListeningSessionField extends FilterBase {
  ListeningSessionField(ListeningSessionFilterBuilder listeningsessionFB) : super(listeningsessionFB);

  @override
  ListeningSessionFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder isNull() {
    return super.isNull() as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ListeningSessionFilterBuilder;
  }

  @override
  ListeningSessionField get not {
    return super.not as ListeningSessionField;
  }
}
// endregion ListeningSessionField

// region ListeningSessionFilterBuilder
class ListeningSessionFilterBuilder extends ConjunctionBase {
  ListeningSessionFilterBuilder(ListeningSession obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnListeningSession = obj._mnListeningSession;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ListeningSessionManager? _mnListeningSession;

  /// put the sql keyword 'AND'
  @override
  ListeningSessionFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ListeningSessionFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ListeningSessionFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ListeningSessionFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ListeningSessionFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ListeningSessionFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ListeningSessionFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ListeningSessionFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ListeningSessionFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ListeningSessionFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ListeningSessionFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ListeningSessionField _setField(ListeningSessionField? field, String colName, DbType dbtype) {
    return ListeningSessionField(this)
      ..param = DbParameter(dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ListeningSessionField? _techId_;
  ListeningSessionField get techId_ {
    return _techId_ = _setField(_techId_, 'techId_', DbType.integer);
  }

  ListeningSessionField? _name;
  ListeningSessionField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ListeningSessionField? _label;
  ListeningSessionField get label {
    return _label = _setField(_label, 'label', DbType.text);
  }

  ListeningSessionField? _duration;
  ListeningSessionField get duration {
    return _duration = _setField(_duration, 'duration', DbType.numeric);
  }

  ListeningSessionField? _isActive;
  ListeningSessionField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  ListeningSessionField? _rownum;
  ListeningSessionField get rownum {
    return _rownum = _setField(_rownum, 'rownum', DbType.integer);
  }

  ListeningSessionField? _hotWordName;
  ListeningSessionField get hotWordName {
    return _hotWordName = _setField(_hotWordName, 'hotWordName', DbType.text);
  }

  /// Deletes List<ListeningSession> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnListeningSession!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnListeningSession!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'techId_ IN (SELECT techId_ from listeningSession ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnListeningSession!.updateBatch(qparams, values);
  }

  /// This method always returns [ListeningSession] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ListeningSession?
  @override
  Future<ListeningSession?> toSingle(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnListeningSession!.toList(qparams);
    final data = await objFuture;
    ListeningSession? obj;
    if (data.isNotEmpty) {
      obj = ListeningSession.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('listeningSession.plHotWords') && */ (preloadFields == null ||
            preloadFields.contains('plHotWords'))) {
          /*_loadedfields!.add('listeningSession.plHotWords'); */ obj.plHotWords = obj.plHotWords ??
              await obj.getHotWords()!.toList(
                  preload: preload, preloadFields: preloadFields, loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [ListeningSession]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ListeningSession?
  @override
  Future<ListeningSession> toSingleOrDefault(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload, preloadFields: preloadFields, loadParents: loadParents, loadedFields: loadedFields) ??
        ListeningSession();
  }

  /// This method returns int. [ListeningSession]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? listeningsessionCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final listeningsessionsFuture = await _mnListeningSession!.toList(qparams);
    final int count = listeningsessionsFuture[0]['CNT'] as int;
    if (listeningsessionCount != null) {
      listeningsessionCount(count);
    }
    return count;
  }

  /// This method returns List<ListeningSession> [ListeningSession]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<ListeningSession>
  @override
  Future<List<ListeningSession>> toList(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<ListeningSession> listeningsessionsData = await ListeningSession.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return listeningsessionsData;
  }

  /// This method returns Json String [ListeningSession]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ListeningSession]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ListeningSession]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnListeningSession!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ListeningSession]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `techId_`name` FROM listeningSession WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<techId_,name> [ListeningSession]
  /// <returns>List<techId_,name>
  @override
  Future<List<ListeningSession>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    qparams.selectColumns = ['techId_', 'name'];
    final listeningsessionFuture = await _mnListeningSession!.toList(qparams);
    return await ListeningSession.fromMapList(listeningsessionFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ListeningSession]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnListeningSession!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await ListeningSession.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString([VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnListeningSession!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ListeningSessionFilterBuilder

// region ListeningSessionFields
class ListeningSessionFields {
  static TableField? _fTechId_;
  static TableField get techId_ {
    return _fTechId_ = _fTechId_ ?? SqlSyntax.setField(_fTechId_, 'techid_', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fLabel;
  static TableField get label {
    return _fLabel = _fLabel ?? SqlSyntax.setField(_fLabel, 'label', DbType.text);
  }

  static TableField? _fDuration;
  static TableField get duration {
    return _fDuration = _fDuration ?? SqlSyntax.setField(_fDuration, 'duration', DbType.numeric);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive = _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fRownum;
  static TableField get rownum {
    return _fRownum = _fRownum ?? SqlSyntax.setField(_fRownum, 'rownum', DbType.integer);
  }

  static TableField? _fHotWordName;
  static TableField get hotWordName {
    return _fHotWordName = _fHotWordName ?? SqlSyntax.setField(_fHotWordName, 'hotWordName', DbType.text);
  }
}
// endregion ListeningSessionFields

//region ListeningSessionManager
class ListeningSessionManager extends SqfEntityProvider {
  ListeningSessionManager()
      : super(DbModel(), tableName: _tableName, primaryKeyList: _primaryKeyList, whereStr: _whereStr);
  static const String _tableName = 'listeningSession';
  static const List<String> _primaryKeyList = ['techId_', 'name'];
  static const String _whereStr = 'techId_=? AND name=?';
}

//endregion ListeningSessionManager
// region ListeningSessionHotWord
class ListeningSessionHotWord extends TableBase {
  ListeningSessionHotWord(
      {this.listeningSessionTechId_, this.hotWordTechId_, this.listeningSessionName, this.hotWordName}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  ListeningSessionHotWord.withFields(
      this.listeningSessionTechId_, this.hotWordTechId_, this.listeningSessionName, this.hotWordName) {
    _setDefaultValues();
  }
  ListeningSessionHotWord.withId(
      this.listeningSessionTechId_, this.hotWordTechId_, this.listeningSessionName, this.hotWordName) {
    _setDefaultValues();
  }
  // fromMap v2.0
  ListeningSessionHotWord.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    listeningSessionTechId_ = int.tryParse(o['listeningSessionTechId_'].toString());

    hotWordTechId_ = int.tryParse(o['hotWordTechId_'].toString());

    if (o['listeningSessionName'] != null) {
      listeningSessionName = o['listeningSessionName'].toString();
    }
    if (o['hotWordName'] != null) {
      hotWordName = o['hotWordName'].toString();
    }

    // RELATIONSHIPS FromMAP
    plListeningSession =
        o['listeningSession'] != null ? ListeningSession.fromMap(o['listeningSession'] as Map<String, dynamic>) : null;
    plHotWord = o['hotWord'] != null ? HotWord.fromMap(o['hotWord'] as Map<String, dynamic>) : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (ListeningSessionHotWord)
  int? listeningSessionTechId_;
  int? hotWordTechId_;
  String? listeningSessionName;
  String? hotWordName;
  bool? isSaved;
  // end FIELDS (ListeningSessionHotWord)

// RELATIONSHIPS (ListeningSessionHotWord)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plListeningSession', 'plField2'..]) or so on..
  ListeningSession? plListeningSession;

  /// get ListeningSession By ListeningSessionTechId_
  Future<ListeningSession?> getListeningSession({bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await ListeningSession()
        .getById(listeningSessionTechId_, listeningSessionName, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plHotWord', 'plField2'..]) or so on..
  HotWord? plHotWord;

  /// get HotWord By HotWordTechId_
  Future<HotWord?> getHotWord({bool loadParents = false, List<String>? loadedFields}) async {
    final _obj =
        await HotWord().getById(hotWordTechId_, hotWordName, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (ListeningSessionHotWord)

  static const bool _softDeleteActivated = false;
  ListeningSessionHotWordManager? __mnListeningSessionHotWord;

  ListeningSessionHotWordManager get _mnListeningSessionHotWord {
    return __mnListeningSessionHotWord = __mnListeningSessionHotWord ?? ListeningSessionHotWordManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (listeningSessionTechId_ != null) {
      map['listeningSessionTechId_'] = forView
          ? plListeningSession == null
              ? listeningSessionTechId_
              : plListeningSession!.name
          : listeningSessionTechId_;
    } else if (listeningSessionTechId_ != null || !forView) {
      map['listeningSessionTechId_'] = null;
    }
    if (hotWordTechId_ != null) {
      map['hotWordTechId_'] = forView
          ? plHotWord == null
              ? hotWordTechId_
              : plHotWord!.name
          : hotWordTechId_;
    } else if (hotWordTechId_ != null || !forView) {
      map['hotWordTechId_'] = null;
    }
    if (listeningSessionName != null || !forView) {
      map['listeningSessionName'] = listeningSessionName;
    }
    if (hotWordName != null || !forView) {
      map['hotWordName'] = hotWordName;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false, bool forJson = false, bool forView = false]) async {
    final map = <String, dynamic>{};
    if (listeningSessionTechId_ != null) {
      map['listeningSessionTechId_'] = forView
          ? plListeningSession == null
              ? listeningSessionTechId_
              : plListeningSession!.name
          : listeningSessionTechId_;
    } else if (listeningSessionTechId_ != null || !forView) {
      map['listeningSessionTechId_'] = null;
    }
    if (hotWordTechId_ != null) {
      map['hotWordTechId_'] = forView
          ? plHotWord == null
              ? hotWordTechId_
              : plHotWord!.name
          : hotWordTechId_;
    } else if (hotWordTechId_ != null || !forView) {
      map['hotWordTechId_'] = null;
    }
    if (listeningSessionName != null || !forView) {
      map['listeningSessionName'] = listeningSessionName;
    }
    if (hotWordName != null || !forView) {
      map['hotWordName'] = hotWordName;
    }

    return map;
  }

  /// This method returns Json String [ListeningSessionHotWord]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ListeningSessionHotWord]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [listeningSessionTechId_, hotWordTechId_, listeningSessionName, hotWordName];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [listeningSessionTechId_, hotWordTechId_, listeningSessionName, hotWordName];
  }

  static Future<List<ListeningSessionHotWord>?> fromWebUrl(Uri uri, {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint('SQFENTITY ERROR ListeningSessionHotWord.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<ListeningSessionHotWord>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ListeningSessionHotWord>[];
    try {
      objList = list
          .map((listeningsessionhotword) =>
              ListeningSessionHotWord.fromMap(listeningsessionhotword as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR ListeningSessionHotWord.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ListeningSessionHotWord>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<ListeningSessionHotWord> objList = <ListeningSessionHotWord>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ListeningSessionHotWord.fromMap(map as Map<String, dynamic>, setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null || loadParents || preloadFields.contains('plListeningSession'))) {
          obj.plListeningSession = obj.plListeningSession ?? await obj.getListeningSession(loadParents: loadParents);
        }
        if ((preloadFields == null || loadParents || preloadFields.contains('plHotWord'))) {
          obj.plHotWord = obj.plHotWord ?? await obj.getHotWord(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ListeningSessionHotWord by ID if exist, otherwise returns null
  /// Primary Keys: int? listeningSessionTechId_, int? hotWordTechId_
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [ListeningSessionHotWord] if exist, otherwise returns null
  Future<ListeningSessionHotWord?> getById(int? listeningSessionTechId_, int? hotWordTechId_,
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    if (listeningSessionTechId_ == null) {
      return null;
    }
    ListeningSessionHotWord? obj;
    final data = await _mnListeningSessionHotWord.getById([listeningSessionTechId_, hotWordTechId_]);
    if (data.length != 0) {
      obj = ListeningSessionHotWord.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null || loadParents || preloadFields.contains('plListeningSession'))) {
          obj.plListeningSession = obj.plListeningSession ?? await obj.getListeningSession(loadParents: loadParents);
        }
        if ((preloadFields == null || loadParents || preloadFields.contains('plHotWord'))) {
          obj.plHotWord = obj.plHotWord ?? await obj.getHotWord(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ListeningSessionHotWord) object. If the Primary Key (listeningSessionTechId_) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same listeningSessionTechId_
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnListeningSessionHotWord.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO listeningSessionHotWord ( listeningSessionTechId_, hotWordTechId_, listeningSessionName, hotWordName)  VALUES (?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<ListeningSessionHotWord> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ListeningSessionHotWord> listeningsessionhotwords,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DbModel().batchStart();
    for (final obj in listeningsessionhotwords) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await DbModel().batchCommit(exclusive: exclusive, noResult: noResult, continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnListeningSessionHotWord.rawInsert(
          'INSERT OR REPLACE INTO listeningSessionHotWord ( listeningSessionTechId_, hotWordTechId_, listeningSessionName, hotWordName)  VALUES (?,?,?,?)',
          [listeningSessionTechId_, hotWordTechId_, listeningSessionName, hotWordName],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'ListeningSessionHotWord listeningSessionTechId_=$listeningSessionTechId_ updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'ListeningSessionHotWord listeningSessionTechId_=$listeningSessionTechId_ did not update');
      }
      return listeningSessionTechId_;
    } catch (e) {
      saveResult =
          BoolResult(success: false, errorMessage: 'ListeningSessionHotWord Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<ListeningSessionHotWord>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<ListeningSessionHotWord> listeningsessionhotwords,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnListeningSessionHotWord.rawInsertAll(
        'INSERT OR REPLACE INTO listeningSessionHotWord ( listeningSessionTechId_, hotWordTechId_, listeningSessionName, hotWordName)  VALUES (?,?,?,?)',
        listeningsessionhotwords,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes ListeningSessionHotWord

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete ListeningSessionHotWord invoked (listeningSessionTechId_=$listeningSessionTechId_)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnListeningSessionHotWord.delete(QueryParams(
          whereString: 'listeningSessionTechId_=? AND hotWordTechId_=?',
          whereArguments: [listeningSessionTechId_, hotWordTechId_]));
    } else {
      return _mnListeningSessionHotWord.updateBatch(
          QueryParams(
              whereString: 'listeningSessionTechId_=? AND hotWordTechId_=?',
              whereArguments: [listeningSessionTechId_, hotWordTechId_]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg = 'set useSoftDeleting:true in the table definition of [ListeningSessionHotWord] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ListeningSessionHotWordFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ListeningSessionHotWordFilterBuilder(this, getIsDeleted)..qparams.selectColumns = columnsToSelect;
  }

  @override
  ListeningSessionHotWordFilterBuilder distinct({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ListeningSessionHotWordFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      listeningSessionTechId_ = null;
      hotWordTechId_ = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion listeningsessionhotword

// region ListeningSessionHotWordField
class ListeningSessionHotWordField extends FilterBase {
  ListeningSessionHotWordField(ListeningSessionHotWordFilterBuilder listeningsessionhotwordFB)
      : super(listeningsessionhotwordFB);

  @override
  ListeningSessionHotWordFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder isNull() {
    return super.isNull() as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ListeningSessionHotWordFilterBuilder;
  }

  @override
  ListeningSessionHotWordField get not {
    return super.not as ListeningSessionHotWordField;
  }
}
// endregion ListeningSessionHotWordField

// region ListeningSessionHotWordFilterBuilder
class ListeningSessionHotWordFilterBuilder extends ConjunctionBase {
  ListeningSessionHotWordFilterBuilder(ListeningSessionHotWord obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnListeningSessionHotWord = obj._mnListeningSessionHotWord;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ListeningSessionHotWordManager? _mnListeningSessionHotWord;

  /// put the sql keyword 'AND'
  @override
  ListeningSessionHotWordFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ListeningSessionHotWordFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ListeningSessionHotWordFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ListeningSessionHotWordFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ListeningSessionHotWordFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ListeningSessionHotWordFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ListeningSessionHotWordFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ListeningSessionHotWordFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ListeningSessionHotWordFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ListeningSessionHotWordFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ListeningSessionHotWordFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ListeningSessionHotWordField _setField(ListeningSessionHotWordField? field, String colName, DbType dbtype) {
    return ListeningSessionHotWordField(this)
      ..param = DbParameter(dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ListeningSessionHotWordField? _listeningSessionTechId_;
  ListeningSessionHotWordField get listeningSessionTechId_ {
    return _listeningSessionTechId_ = _setField(_listeningSessionTechId_, 'listeningSessionTechId_', DbType.integer);
  }

  ListeningSessionHotWordField? _hotWordTechId_;
  ListeningSessionHotWordField get hotWordTechId_ {
    return _hotWordTechId_ = _setField(_hotWordTechId_, 'hotWordTechId_', DbType.integer);
  }

  ListeningSessionHotWordField? _listeningSessionName;
  ListeningSessionHotWordField get listeningSessionName {
    return _listeningSessionName = _setField(_listeningSessionName, 'listeningSessionName', DbType.text);
  }

  ListeningSessionHotWordField? _hotWordName;
  ListeningSessionHotWordField get hotWordName {
    return _hotWordName = _setField(_hotWordName, 'hotWordName', DbType.text);
  }

  /// Deletes List<ListeningSessionHotWord> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnListeningSessionHotWord!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnListeningSessionHotWord!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'listeningSessionTechId_ IN (SELECT listeningSessionTechId_ from listeningSessionHotWord ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnListeningSessionHotWord!.updateBatch(qparams, values);
  }

  /// This method always returns [ListeningSessionHotWord] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ListeningSessionHotWord?
  @override
  Future<ListeningSessionHotWord?> toSingle(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnListeningSessionHotWord!.toList(qparams);
    final data = await objFuture;
    ListeningSessionHotWord? obj;
    if (data.isNotEmpty) {
      obj = ListeningSessionHotWord.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null || loadParents || preloadFields.contains('plListeningSession'))) {
          obj.plListeningSession = obj.plListeningSession ?? await obj.getListeningSession(loadParents: loadParents);
        }
        if ((preloadFields == null || loadParents || preloadFields.contains('plHotWord'))) {
          obj.plHotWord = obj.plHotWord ?? await obj.getHotWord(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [ListeningSessionHotWord]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ListeningSessionHotWord?
  @override
  Future<ListeningSessionHotWord> toSingleOrDefault(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload, preloadFields: preloadFields, loadParents: loadParents, loadedFields: loadedFields) ??
        ListeningSessionHotWord();
  }

  /// This method returns int. [ListeningSessionHotWord]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? listeningsessionhotwordCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final listeningsessionhotwordsFuture = await _mnListeningSessionHotWord!.toList(qparams);
    final int count = listeningsessionhotwordsFuture[0]['CNT'] as int;
    if (listeningsessionhotwordCount != null) {
      listeningsessionhotwordCount(count);
    }
    return count;
  }

  /// This method returns List<ListeningSessionHotWord> [ListeningSessionHotWord]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<ListeningSessionHotWord>
  @override
  Future<List<ListeningSessionHotWord>> toList(
      {bool preload = false, List<String>? preloadFields, bool loadParents = false, List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<ListeningSessionHotWord> listeningsessionhotwordsData = await ListeningSessionHotWord.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return listeningsessionhotwordsData;
  }

  /// This method returns Json String [ListeningSessionHotWord]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ListeningSessionHotWord]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ListeningSessionHotWord]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnListeningSessionHotWord!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ListeningSessionHotWord]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `listeningSessionTechId_`hotWordTechId_` FROM listeningSessionHotWord WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<listeningSessionTechId_,hotWordTechId_> [ListeningSessionHotWord]
  /// <returns>List<listeningSessionTechId_,hotWordTechId_>
  @override
  Future<List<ListeningSessionHotWord>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    qparams.selectColumns = ['listeningSessionTechId_', 'hotWordTechId_'];
    final listeningsessionhotwordFuture = await _mnListeningSessionHotWord!.toList(qparams);
    return await ListeningSessionHotWord.fromMapList(listeningsessionhotwordFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ListeningSessionHotWord]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnListeningSessionHotWord!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await ListeningSessionHotWord.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString([VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnListeningSessionHotWord!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ListeningSessionHotWordFilterBuilder

// region ListeningSessionHotWordFields
class ListeningSessionHotWordFields {
  static TableField? _fListeningSessionTechId_;
  static TableField get listeningSessionTechId_ {
    return _fListeningSessionTechId_ = _fListeningSessionTechId_ ??
        SqlSyntax.setField(_fListeningSessionTechId_, 'listeningSessionTechId_', DbType.integer);
  }

  static TableField? _fHotWordTechId_;
  static TableField get hotWordTechId_ {
    return _fHotWordTechId_ =
        _fHotWordTechId_ ?? SqlSyntax.setField(_fHotWordTechId_, 'hotWordTechId_', DbType.integer);
  }

  static TableField? _fListeningSessionName;
  static TableField get listeningSessionName {
    return _fListeningSessionName =
        _fListeningSessionName ?? SqlSyntax.setField(_fListeningSessionName, 'listeningSessionName', DbType.text);
  }

  static TableField? _fHotWordName;
  static TableField get hotWordName {
    return _fHotWordName = _fHotWordName ?? SqlSyntax.setField(_fHotWordName, 'hotWordName', DbType.text);
  }
}
// endregion ListeningSessionHotWordFields

//region ListeningSessionHotWordManager
class ListeningSessionHotWordManager extends SqfEntityProvider {
  ListeningSessionHotWordManager()
      : super(DbModel(), tableName: _tableName, primaryKeyList: _primaryKeyList, whereStr: _whereStr);
  static const String _tableName = 'listeningSessionHotWord';
  static const List<String> _primaryKeyList = ['listeningSessionTechId_', 'hotWordTechId_'];
  static const String _whereStr = 'listeningSessionTechId_=? AND hotWordTechId_=?';
}

//endregion ListeningSessionHotWordManager
/// Region SEQUENCE RownumberSequence
class RownumberSequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await DbModelSequenceManager().sequence(SequenceRownumberSequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await DbModelSequenceManager().sequence(SequenceRownumberSequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await DbModelSequenceManager().sequence(SequenceRownumberSequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE RownumberSequence

class DbModelSequenceManager extends SqfEntityProvider {
  DbModelSequenceManager() : super(DbModel());
}
// END OF ENTITIES
